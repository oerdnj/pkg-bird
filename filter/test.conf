/*
 *	This is an example configuration file.
 *	FIXME: add all examples from docs here.
 */

# Yet another comment

router id 62.168.0.1;

define xyzzy = (120+10);
define '1a-a1' = (20+10);


function 'mkpair-a'(int a)
{
	return (1, a);
}

function mkpath(int a; int b)
{
	return [= a b 3 2 1 =];
}

function callme(int arg1; int arg2)
int local1;
int local2;
int i;
{
	printn "Function callme called arguments ", arg1, " and ", arg2, ":" ;
	i = arg2;

	case arg1 {
	2: print "dva"; print "jeste jednou dva";
	3 .. 5: print "tri az pet";
	else: print "neco jineho";
	}	
}

function fifteen()
{
	print "fifteen called";
	return 15;
}

function paths()
bgpmask pm1;
bgpmask pm2;
bgppath p2;
clist l;
{
	pm1 =  / 4 3 2 1 /;
	pm2 = [= 4 3 2 1 =];
	print "Testing path masks: ", pm1, " ", pm2;
	p2 = prepend( + empty +, 1 );
	p2 = prepend( p2, 2 );
	p2 = prepend( p2, 3 );
	p2 = prepend( p2, 4 );
	print "Testing paths: ", p2;
	print "Should be true: ", p2 ~ pm1, " ", p2 ~ pm2;
	print "4 = ", p2.len;
	p2 = prepend( p2, 5 );
	print "Should be false: ", p2 ~ pm1, " ", p2 ~ pm2;
	print "Should be true: ", p2 ~  / ? 4 3 2 1 /,  " ", p2, " ",  / ? 4 3 2 1 /;
	print "Should be true: ", p2 ~ [= * 4 3 * 1 =], " ", p2, " ", [= * 4 3 * 1 =];
	print "Should be true: ", p2 ~ [= (3+2) (2*2) 3 2 1 =], " ", p2 ~ mkpath(5, 4);
	print "Should be true: ", p2.len = 5, " ", p2.first = 5, " ", p2.last = 1;
	print "5 = ", p2.len;
	
	pm1 = [= 1 2 * 3 4 5 =];
	p2 = prepend( + empty +, 5 );
	p2 = prepend( p2, 4 );
	p2 = prepend( p2, 3 );
	p2 = prepend( p2, 3 );
	p2 = prepend( p2, 2 );
	p2 = prepend( p2, 1 );
	print "Should be true: ", p2 ~ pm1, " ", p2, " ", pm1;

	l = - empty -;
	l = add( l, (1,2) );
	l = add( l, (2,3) );
	print "Community list (1,2) (2,3) ", l;
	print "Should be true: ", (2,3) ~ l;
	l = delete( l, (2,3) );
	print "Community list (1,2) ", l;
	print "Should be false: ", (2,3) ~ l;
}

function bla()
{
	print "fifteen called";
	return 15;
}

define four=4;
define onetwo=1.2.3.4;

function __test1()
{
        if source ~ [ RTS_BGP, RTS_STATIC ] then {                     
#                       ospf_metric1 = 65535;                                                                     
#                       ospf_metric2 = 1000;                                            
                        ospf_tag = 0x12345678;                              
                        accept;                                             
        }                                                                                                                                                                                                                reject;                                                                                                                                                                                          
}

function __test2()
{
        if source ~ [ RTS_BGP, RTS_STATIC ] then {                     
#                       ospf_metric1 = 65535;                                                                     
#                       ospf_metric2 = 1000;                                            
                        ospf_tag = 0x12345678;                              
                        accept;                                             
                }                                                                                                                                                                                                                reject;                                                                                                                                                                                          
}

function test_pxset(prefix set pxs)
{
	print "  must be true:  ",	10.0.0.0/8  ~ pxs, ",", 10.0.0.0/10  ~ pxs, ",", 10.0.0.0/12 ~ pxs, ",",
					20.0.0.0/24 ~ pxs, ",", 20.0.40.0/24 ~ pxs, ",", 20.0.0.0/26 ~ pxs, ",",
					20.0.100.0/26 ~ pxs, ",", 20.0.0.0/28 ~ pxs, ",", 20.0.255.0/28 ~ pxs;
	print "  must be false: ",	10.0.0.0/7 ~ pxs,  ",", 10.0.0.0/13 ~ pxs, ",", 10.0.0.0/16 ~ pxs, ",",
					20.0.0.0/16 ~ pxs, ",", 20.0.0.0/23 ~ pxs, ",", 20.0.0.0/29 ~ pxs, ",",
					11.0.0.0/10 ~ pxs, ",", 20.1.0.0/26 ~ pxs;
}

function test_undef(int a)
int b;
{
	if a = 3
	then b = 4;
	print "Defined: ", a, " ", b, " ", defined(b);
}

function __startup() 
int i;
bool b;
prefix px;
ip p;
pair pp;
quad qq;
int set is;
int set is1;
int set is2;
int set is3;
pair set ps;
prefix set pxs;
string s;
{
	print "1a-a1 = 30: ", '1a-a1'; 
	print "Testing filter language:";
	i = four; 
	i = 12*100 + 60/2 + i; 
	i = ( i + 0 );
	print "  arithmetics: 1234 = ", i;
	printn "  if statements ";
	print "what happens here?";
	printn ".";
	if (i = 4) then { print "*** FAIL: if 0"; quitbird; } else printn ".";
#	if !(i = 3) then { print "*** FAIL: if 0"; quitbird; } else printn ".";
	if 1234 = i then printn "."; else { print "*** FAIL: if 1 else"; }
#	if 1 <= 1 then printn "."; else { print "*** FAIL: test 3"; }
	if 1234 < 1234 then { print "*** FAIL: test 4"; quitbird; } else print "ok";
	is = [ 2, 3, 4, 7..11 ];
	print "  must be true: ", 1.2.0.0/16 ~ [ 1.0.0.0/8{ 15 , 17 } ];
	print "  data types; must be true: ", 1.2.3.4 = 1.2.3.4, ",", 1 ~ [1,2,3], ",", 5 ~ [1..20], ",", 10 ~ is, ",", 2 ~ [ 1, 2, 3 ], ",", 5 ~ [ 4 .. 7 ], ",", 1.2.3.4 ~ [ 1.2.3.3..1.2.3.5 ], ",", 1.2.3.4 ~ 1.0.0.0/8, ",", 1.0.0.0/8 ~ 1.0.0.0/8, ",", 1.0.0.0/8 ~ [ 1.0.0.0/8+ ];
	print "  must be true: ", true && true, ",", true || false, ",", ! false && ! false && true, ",", 1 < 2 && 1 != 3, ",", true && true && ! false;

	print "  must be true: ", defined(1), ",", defined(1.2.3.4), ",", 1 != 2, ",", 1 <= 2;
	print "  data types: must be false: ", 1 ~ [ 2, 3, 4 ], ",", 5 ~ is, ",", 1.2.3.4 ~ [ 1.2.3.3, 1.2.3.5 ], ",", (1,2) > (2,2), ",", (1,1) > (1,1), ",", 1.0.0.0/9 ~ [ 1.0.0.0/8- ], ",", 1.2.0.0/17 ~ [ 1.0.0.0/8{ 15 , 16 } ], ",", true && false;

	is1 = [2, 3, 5, 8, 11, 15, 17, 19];
	is2 = [19, 17, 15, 11, 8, 5, 3, 2];
	is3 = [5, 17, 2, 11, 8, 15, 3, 19];

	print "  must be true:  ", 2 ~ is1, "  ", 2 ~ is2, "  ", 2 ~ is3;
	print "  must be false: ", 4 ~ is1, " ", 4 ~ is2, " ", 4 ~ is3;
	print "  must be false: ", 10 ~ is1, " ", 10 ~ is2, " ", 10 ~ is3;
	print "  must be true:  ", 15 ~ is1, "  ", 15 ~ is2, "  ", 15 ~ is3;
	print "  must be false: ", 18 ~ is1, " ", 18 ~ is2, " ", 18 ~ is3;
	print "  must be true:  ", 19 ~ is1, "  ", 19 ~ is2, "  ", 19 ~ is3;
	print "  must be false: ", 20 ~ is1, " ", 20 ~ is2, " ", 20 ~ is3;

	px = 1.2.0.0/18;
	print "Testing prefixes: 1.2.0.0/18 = ", px;
	print "  must be true:  ",	192.168.0.0/16 ~ 192.168.0.0/16, " ", 192.168.0.0/17 ~ 192.168.0.0/16, " ", 192.168.254.0/24 ~ 192.168.0.0/16;
	print "  must be false: ",	192.168.0.0/15 ~ 192.168.0.0/16, " ", 192.160.0.0/17 ~ 192.168.0.0/16;

	p = 127.1.2.3;
	print "Testing mask : 127.0.0.0 = ", p.mask(8);
	
	pp = (1, 2);
	print "Testing pairs: (1,2) = ", (1,2), " = ", pp, " = ", (1,1+1), " = ", 'mkpair-a'(2);
	print "  must be true:  ", (1,2) = (1,1+1);
	print "Testing enums: ", RTS_DUMMY, " ", RTS_STATIC, " ",
		", true: ", RTS_STATIC ~ [RTS_STATIC, RTS_DEVICE],
		", false: ", RTS_BGP ~ [RTS_STATIC, RTS_DEVICE];

	ps = [(1,2), (3,4)..(3,8)];
	print "Testing pair set (TTF):", pp ~ ps,  " ", (3,5) ~ ps, " ", (3,9) ~ ps;

	qq = 1.2.3.4;
	print "Testinq quad: 1.2.3.4 = ", qq,
		", true: ", qq = 1.2.3.4, " ", qq ~ [1.2.3.4, 5.6.7.8],
		", false: ", qq = 4.3.2.1, " ", qq ~ [1.2.1.1, 1.2.3.5];


	s = "Hello";
	print "Testing string: ", s, " true: ", s ~ "Hell*", " false: ", s ~ "ell*";
	
	b = true;
	print "Testing bool: ", b, ", ", !b;

        if ( b = true ) then print "Testing bool comparison b = true: ", b;
	else { print "*** FAIL: TRUE test failed" ; quitbird; }
	
	pxs = [ 1.2.0.0/16, 1.4.0.0/16+];
	print "Testing prefix sets: ";
	print pxs;
	print "  must be true:  ",	1.2.0.0/16 ~ pxs, ",", 1.4.0.0/16 ~ pxs, ",", 1.4.0.0/18 ~ pxs, ",", 1.4.0.0/32 ~ pxs;
	print "  must be false: ",	1.1.0.0/16 ~ pxs, ",", 1.3.0.0/16 ~ pxs, ",", 1.2.0.0/15 ~ pxs, ",", 1.2.0.0/17 ~ pxs, ",",
					1.2.0.0/32 ~ pxs, ",", 1.4.0.0/15 ~ pxs;

	test_pxset([ 10.0.0.0/16{8,12}, 20.0.0.0/16{24,28} ]);
	print "What will this do? ", [ 1, 2, 1, 1, 1, 3, 4, 1, 1, 1, 5 ];

	print "Testing functions...";
#	callme ( 1, 2 );
	callme ( 2, 2 );
	callme ( 2, 2 );
	callme ( 3, 2 );
	callme ( 4, 2 );
	callme ( 7, 2 );

	i = fifteen();
	print "Testing function calls: 15 = ", i;

	paths();

	print "1.2.3.4 = ", onetwo;

	test_undef(2);
	test_undef(3);
	test_undef(2);

	print "done";
	quitbird;
#	print "*** FAIL: this is unreachable"; 
}

filter testf 
int j; 
{ 
	print "Heya, filtering route to ", net.ip, " prefixlen ", net.len, " source ", source;
	print "This route was from ", from;
	j = 7;
	j = 17;
	if rip_metric > 15 then {
 		reject "RIP Metric is more than infinity";
	}
	rip_metric = 14;
	unset(rip_metric);
		
	accept "ok I take that";
}

eval __startup();
